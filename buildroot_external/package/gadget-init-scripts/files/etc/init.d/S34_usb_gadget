#!/bin/sh

# USB Gadget for CHIP Pro, forked from LEGO MINDSTORMS EV3 gadget script
#
# Copyright (C) 2015,2017 David Lechner <david@lechnology.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
    
# make sure libcomposite is loaded
modprobe sunxi
modprobe musb_hdrc
modprobe libcomposite
modprobe udc_core

# a udc device name, such as "musb-hdrc.1.auto"
udc_device="$(ls /sys/class/udc)"

g="/sys/kernel/config/usb_gadget/g_kettlepop"

# generate serial number
CONFIG_FILE=/var/lib/usb-gadget.cfg
[[ -f "${CONFIG_FILE}" ]] && source "${CONFIG_FILE}"
[[ -z "${SERIAL}" ]] && SERIAL="06$(echo $RANDOM | md5sum | cut -c 1-14)" && echo "SERIAL=${SERIAL}" >"${CONFIG_FILE}"

# add colons for MAC address format
dev_mac1=$(/bin/echo  ${SERIAL} | /bin/sed 's/../&:/g;s/:$//' | /usr/bin/cut -d: -f -2,5-)
host_mac1=$(/bin/echo ${SERIAL} | /bin/sed 's/../&:/g;s/:$//' | /usr/bin/cut -d: -f -3,6-)
dev_mac2=$(/bin/echo  ${SERIAL} | /bin/sed 's/../&:/g;s/:$//' | /usr/bin/cut -d: -f -4,7-)
host_mac2=$(/bin/echo ${SERIAL} | /bin/sed 's/../&:/g;s/:$//' | /usr/bin/cut -d: -f -5,8-)

# check bootargs for new IP setting
bootarg_ip=$(cat /proc/cmdline | grep -o 'ip=[^ ]*')
if [ ! -z $bootarg_ip ] &&\
 [ ! -z "$(cat /etc/dnsmasq.conf | grep 192.168.81.1)" ] &&\
 [ ! -z "$(cat /etc/network/interfaces | grep 192.168.81.1)" ]; then
	bootarg_ip="$(echo $bootarg_ip | cut -c 4-)"
	sed -i "s%192.168.81.1%$bootarg_ip%g" /etc/network/interfaces
fi

if [ $(cat /etc/dnsmasq.conf | grep HOST1) ]; then	# First boot setup
	sed "s%HOST1%$host_mac1%g" /etc/dnsmasq.conf > /var/tmpdns
	sed -i "s%HOST2%$host_mac2%g" /var/tmpdns
	if [ -d /data ]; then
		mv /var/tmpdns /data/etc/dnsmasq.conf
	else
		mv /var/tmpdns /etc/dnsmasq.conf
	fi
fi

gadget_usb_up() {
    usb_ver="0x0200" # USB 2.0
    dev_class="2" # Communications
    vid="0x2dfe" # Next Thing Co.
    pid="0xbeef" # Project Beef
    device="0x0101" # this should be incremented any time there are breaking changes
                    # to this script so that the host OS sees it as a new device and
                    # re-enumerates everything rather than relying on cached values
    mfg="Source Parts"
    prod="Popcorn Ethernet/Serial"

    attr="0xC0" # Self powered
    pwr="1" # 2mA
    cfg1="CDC"
    cfg2="RNDIS"

    ms_vendor_code="0xcd" # Microsoft
    ms_qw_sign="MSFT100" # also Microsoft (if you couldn't tell)
    ms_compat_id="RNDIS" # matches Windows RNDIS Drivers
    ms_subcompat_id="5162001" # matches Windows RNDIS 6.0 Driver

    if [ -d ${g} ]; then
        if [ "$(cat ${g}/UDC)" != "" ]; then
            echo "Gadget is already up."
            exit 1
        fi
        echo "Cleaning up old directory..."
        gadget_usb_down
    fi
    echo "Setting up gadget..."

    # Create a new gadget

    # make sure configfs is mounted
    mount -t configfs none /sys/kernel/config/


    mkdir ${g}
    echo "${usb_ver}" > ${g}/bcdUSB
    echo "${dev_class}" > ${g}/bDeviceClass
    echo "${vid}" > ${g}/idVendor
    echo "${pid}" > ${g}/idProduct
    echo "${device}" > ${g}/bcdDevice
    mkdir ${g}/strings/0x409
    echo "${mfg}" > ${g}/strings/0x409/manufacturer
    echo "${prod}" > ${g}/strings/0x409/product
    echo "${SERIAL}" > ${g}/strings/0x409/serialnumber

    # Create 2 configurations. The first will be CDC. The second will be RNDIS.
    # Thanks to os_desc, Windows should use the second configuration.

    # config 1 is for CDC

    mkdir ${g}/configs/c.1
    echo "${attr}" > ${g}/configs/c.1/bmAttributes
    echo "${pwr}" > ${g}/configs/c.1/MaxPower
    mkdir ${g}/configs/c.1/strings/0x409
    echo "${cfg1}" > ${g}/configs/c.1/strings/0x409/configuration

    # Create the CDC function

    mkdir ${g}/functions/ecm.usb0
    echo "${dev_mac1}" > ${g}/functions/ecm.usb0/dev_addr
    echo "${host_mac1}" > ${g}/functions/ecm.usb0/host_addr

    # config 2 is for RNDIS

    mkdir ${g}/configs/c.2
    echo "${attr}" > ${g}/configs/c.2/bmAttributes
    echo "${pwr}" > ${g}/configs/c.2/MaxPower
    mkdir ${g}/configs/c.2/strings/0x409
    echo "${cfg2}" > ${g}/configs/c.2/strings/0x409/configuration

    # On Windows 7 and later, the RNDIS 5.1 driver would be used by default,
    # but it does not work very well. The RNDIS 6.0 driver works better. In
    # order to get this driver to load automatically, we have to use a
    # Microsoft-specific extension of USB.

    echo "1" > ${g}/os_desc/use
    echo "${ms_vendor_code}" > ${g}/os_desc/b_vendor_code
    echo "${ms_qw_sign}" > ${g}/os_desc/qw_sign

    # Create the RNDIS function, including the Microsoft-specific bits

    mkdir ${g}/functions/rndis.usb0
    echo "${dev_mac2}" > ${g}/functions/rndis.usb0/dev_addr
    echo "${host_mac2}" > ${g}/functions/rndis.usb0/host_addr
    echo "${ms_compat_id}" > ${g}/functions/rndis.usb0/os_desc/interface.rndis/compatible_id
    echo "${ms_subcompat_id}" > ${g}/functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id

    # Link everything up and bind the USB device

    ln -s ${g}/functions/ecm.usb0 ${g}/configs/c.1
    ln -s ${g}/functions/rndis.usb0 ${g}/configs/c.2
    ln -s ${g}/configs/c.2 ${g}/os_desc
    echo "${udc_device}" > ${g}/UDC

    echo "Done."
}

gadget_usb_down() {
    if [ ! -d ${g} ]; then
        echo "Gadget is already down."
        exit 1
    fi
    echo "Taking down gadget..."

    # Have to unlink and remove directories in reverse order.
    # Checks allow to finish takedown after error.

    if [ "$(cat ${g}/UDC)" != "" ]; then
        echo "" > ${g}/UDC
    fi
    rm -f ${g}/os_desc/c.2
    rm -f ${g}/configs/c.2/rndis.usb0
    rm -f ${g}/configs/c.1/ecm.usb0
    [ -d ${g}/functions/ecm.usb0 ] && rmdir ${g}/functions/ecm.usb0
    [ -d ${g}/functions/rndis.usb0 ] && rmdir ${g}/functions/rndis.usb0
    [ -d ${g}/configs/c.2/strings/0x409 ] && rmdir ${g}/configs/c.2/strings/0x409
    [ -d ${g}/configs/c.2 ] && rmdir ${g}/configs/c.2
    [ -d ${g}/configs/c.1/strings/0x409 ] && rmdir ${g}/configs/c.1/strings/0x409
    [ -d ${g}/configs/c.1 ] && rmdir ${g}/configs/c.1
    [ -d ${g}/strings/0x409 ] && rmdir ${g}/strings/0x409
    rmdir ${g}

    echo "Done."
}



case "$1" in
	start)
		printf "Creating USB gadget ...\n"
		gadget_usb_up
		;;
	stop)
		printf "Destroying USB gadget ...\n"
		gadget_usb_down
		;;
	restart|reload)
		printf "Restarting USB gadget ...\n"
		gadget_usb_down
		gadget_usb_up
		;;
	*)
		echo "usage: $0 {start|stop|restart}"
		;;
esac

